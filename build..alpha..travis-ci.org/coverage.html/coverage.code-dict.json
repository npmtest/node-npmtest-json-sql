{"/home/travis/build/npmtest/node-npmtest-json-sql/test.js":"/* istanbul instrument in package npmtest_json_sql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-json-sql/lib.npmtest_json_sql.js":"/* istanbul instrument in package npmtest_json_sql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_json_sql = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_json_sql = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-json-sql/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-json-sql && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_json_sql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_json_sql\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_json_sql.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_json_sql.rollup.js'] =\n            local.assetsDict['/assets.npmtest_json_sql.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_json_sql.__dirname + '/lib.npmtest_json_sql.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/index.js":"'use strict';\n\nvar Builder = require('./builder');\n\nmodule.exports = function(options) {\n\treturn new Builder(options);\n};\nmodule.exports.Builder = Builder;\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/builder.js":"'use strict';\n\nvar _ = require('underscore');\n\nvar dialectsHash = {\n\tbase: require('./dialects/base'),\n\tmssql: require('./dialects/mssql'),\n\tpostgresql: require('./dialects/postgresql'),\n\tsqlite: require('./dialects/sqlite'),\n\tmysql: require('./dialects/mysql')\n};\n\nvar Builder = module.exports = function(options) {\n\tthis.configure(options);\n};\n\nBuilder.prototype._reset = function() {\n\tif (this.options.separatedValues) {\n\t\tthis._placeholderId = 1;\n\t\tthis._values = this.options.namedValues ? {} : [];\n\t} else {\n\t\tdelete this._placeholderId;\n\t\tdelete this._values;\n\t}\n\n\tthis._query = '';\n};\n\nBuilder.prototype._getPlaceholder = function () {\n\tvar placeholder = '';\n\tif (this.options.namedValues) placeholder += 'p';\n\tif (this.options.indexedValues) placeholder += this._placeholderId++;\n\treturn placeholder;\n};\n\nBuilder.prototype._wrapPlaceholder = function(name) {\n\treturn this.options.valuesPrefix + name;\n};\n\nBuilder.prototype._pushValue = function(value) {\n\tif (_.isUndefined(value) || _.isNull(value)) {\n\t\treturn 'null';\n\t} else if (_.isNumber(value) || _.isBoolean(value)) {\n\t\treturn String(value);\n\t} else if (_.isString(value) || _.isDate(value)) {\n\t\tif (this.options.separatedValues) {\n\t\t\tvar placeholder = this._getPlaceholder();\n\n\t\t\tif (this.options.namedValues) {\n\t\t\t\tthis._values[placeholder] = value;\n\t\t\t} else {\n\t\t\t\tthis._values.push(value);\n\t\t\t}\n\n\t\t\treturn this._wrapPlaceholder(placeholder);\n\t\t} else {\n\t\t\tif (_.isDate(value)) value = value.toISOString();\n\n\t\t\treturn '\\'' + value + '\\'';\n\t\t}\n\t} else {\n\t\tthrow new Error('Wrong value type \"' + (typeof value) + '\"');\n\t}\n};\n\nBuilder.prototype.configure = function(options) {\n\toptions = _.defaults({}, options, {\n\t\tseparatedValues: true,\n\t\tnamedValues: true,\n\t\tvaluesPrefix: '$',\n\t\tdialect: 'base',\n\t\twrappedIdentifiers: true,\n\t\tindexedValues: true\n\t});\n\n\tif (options.namedValues && !options.indexedValues) {\n\t\tthrow new Error(\n\t\t\t'Option `indexedValues`: false is ' +\n\t\t\t'not allowed together with option `namedValues`: true'\n\t\t);\n\t}\n\n\tthis.options = options;\n\n\tthis.setDialect(this.options.dialect);\n\n\tthis._reset();\n};\n\nBuilder.prototype.build = function(params) {\n\tvar builder = this;\n\n\tthis._reset();\n\n\tthis._query = this.dialect.buildTemplate('query', {queryBody: params}) + ';';\n\n\tif (this.options.separatedValues) {\n\t\treturn {\n\t\t\tquery: this._query,\n\t\t\tvalues: this._values,\n\t\t\tprefixValues: function() {\n\t\t\t\tvar values = {};\n\t\t\t\t_(this.getValuesObject()).each(function(value, name) {\n\t\t\t\t\tvalues[builder._wrapPlaceholder(name)] = value;\n\t\t\t\t});\n\t\t\t\treturn values;\n\t\t\t},\n\t\t\tgetValuesArray: function() {\n\t\t\t\treturn _.isArray(this.values) ? this.values : _(this.values).values();\n\t\t\t},\n\t\t\tgetValuesObject: function() {\n\t\t\t\treturn _.isArray(this.values) ? _(_.range(1, this.values.length + 1)).object(this.values) :\n\t\t\t\t\tthis.values;\n\t\t\t}\n\t\t};\n\t} else {\n\t\treturn {query: this._query};\n\t}\n};\n\nBuilder.prototype.setDialect = function(name) {\n\tif (!dialectsHash[name]) {\n\t\tthrow new Error('Unknown dialect \"' + name + '\"');\n\t}\n\n\tthis.dialect = new (dialectsHash[name])(this);\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/base/index.js":"'use strict';\n\nvar _ = require('underscore');\nvar ValuesStore = require('../../utils/valuesStore');\nvar objectUtils = require('../../utils/object');\n\nvar templatesInit = require('./templates');\nvar blocksInit = require('./blocks');\nvar operatorsInit = require('./operators');\nvar modifiersInit = require('./modifiers');\n\nvar blockRegExp = /\\{([a-z0-9]+)\\}(.|$)/ig;\n\nvar Dialect = module.exports = function(builder) {\n\tthis.builder = builder;\n\n\tthis.templates = new ValuesStore();\n\tthis.blocks = new ValuesStore();\n\tthis.operators = {\n\t\tcomparison: new ValuesStore(),\n\t\tlogical: new ValuesStore(),\n\t\tfetching: new ValuesStore(),\n\t\tstate: new ValuesStore()\n\t};\n\tthis.modifiers = new ValuesStore();\n\n\t// init templates\n\ttemplatesInit(this);\n\n\t// init blocks\n\tblocksInit(this);\n\n\t// init operators\n\toperatorsInit(this);\n\n\t// init modifiers\n\tmodifiersInit(this);\n\n\tthis.identifierPartsRegexp = new RegExp(\n\t\t'(\\\\' + this.config.identifierPrefix + '[^\\\\' + this.config.identifierSuffix + ']*\\\\' +\n\t\t\tthis.config.identifierSuffix + '|[^\\\\.]+)', 'g'\n\t);\n\tthis.wrappedIdentifierPartRegexp = new RegExp(\n\t\t'^\\\\' + this.config.identifierPrefix + '.*\\\\' + this.config.identifierSuffix + '$'\n\t);\n};\n\nDialect.prototype.config = {\n\tidentifierPrefix: '\"',\n\tidentifierSuffix: '\"'\n};\n\nDialect.prototype._wrapIdentifier = function(name) {\n\tif (this.builder.options.wrappedIdentifiers) {\n\t\tvar self = this;\n\t\tvar nameParts = name.match(this.identifierPartsRegexp);\n\n\t\treturn _(nameParts).map(function(namePart) {\n\t\t\tif (namePart !== '*' && !self.wrappedIdentifierPartRegexp.test(namePart)) {\n\t\t\t\tnamePart = self.config.identifierPrefix + namePart + self.config.identifierSuffix;\n\t\t\t}\n\n\t\t\treturn namePart;\n\t\t}).join('.');\n\t}\n\n\treturn name;\n};\n\nDialect.prototype.buildLogicalOperator = function(params) {\n\tvar self = this;\n\n\tvar operator = params.operator;\n\tvar value = params.value;\n\n\tif (objectUtils.isSimpleValue(value)) {\n\t\tvalue = _.object([params.defaultFetchingOperator], [value]);\n\t}\n\n\tif (_.isEmpty(value)) return '';\n\n\tvar result;\n\n\tif (_.isArray(value)) {\n\t\t// if value is array: [{a: 1}, {b: 2}] process each item as logical operator\n\t\tresult = _(value).map(function(item) {\n\t\t\treturn self.buildOperator({\n\t\t\t\tcontext: 'logical',\n\t\t\t\tcontextOperator: operator,\n\t\t\t\toperator: '$and',\n\t\t\t\tvalue: item,\n\t\t\t\tstates: [],\n\t\t\t\tdefaultFetchingOperator: params.defaultFetchingOperator\n\t\t\t});\n\t\t});\n\t} else {\n\t\tresult = _(value).map(function(item, field) {\n\t\t\t// if field name is not a operator convert it to {$field: {name: 'a', $eq: 'b'}}\n\t\t\tif (field[0] !== '$') {\n\t\t\t\tif (objectUtils.isSimpleValue(item) || _.isArray(item)) {\n\t\t\t\t\titem = {$eq: item};\n\t\t\t\t}\n\t\t\t\titem = _.defaults({name: field}, item);\n\t\t\t\tfield = '$field';\n\t\t\t}\n\n\t\t\treturn self.buildOperator({\n\t\t\t\tcontext: 'logical',\n\t\t\t\tcontextOperator: operator,\n\t\t\t\toperator: field,\n\t\t\t\tvalue: item,\n\t\t\t\tstates: [],\n\t\t\t\tdefaultFetchingOperator: params.defaultFetchingOperator\n\t\t\t});\n\t\t});\n\t}\n\n\treturn this.operators.logical.get(operator).fn(_.compact(result));\n};\n\nDialect.prototype.buildComparisonOperator = function(params) {\n\tvar self = this;\n\n\tvar operator = params.operator;\n\n\t_(params.states).each(function(state) {\n\t\toperator = self.operators.state.get(state).getOperator(operator);\n\t});\n\n\tvar operatorParams = this.operators.comparison.get(operator);\n\n\tvar value = this.buildEndFetchingOperator({\n\t\tcontext: 'comparison',\n\t\tcontextOperator: operator,\n\t\tvalue: params.value,\n\t\tstates: params.states,\n\t\tdefaultFetchingOperator: operatorParams.defaultFetchingOperator ||\n\t\t\tparams.defaultFetchingOperator\n\t});\n\n\treturn operatorParams.fn(params.field, value);\n};\n\nDialect.prototype.buildFetchingOperator = function(params) {\n\tvar operator = params.operator;\n\tvar value = params.value;\n\n\tvar field = this.operators.fetching.get(operator).fn(value, params.end);\n\n\tvar result;\n\tif (params.end || objectUtils.isSimpleValue(value)) {\n\t\tresult = field;\n\t} else {\n\t\tresult = this.buildOperatorsGroup({\n\t\t\tcontext: 'fetching',\n\t\t\tcontextOperator: operator,\n\t\t\toperator: '$and',\n\t\t\tfield: field,\n\t\t\tvalue: value,\n\t\t\tstates: params.states,\n\t\t\tdefaultFetchingOperator: params.defaultFetchingOperator\n\t\t});\n\t}\n\n\treturn result;\n};\n\nDialect.prototype.buildEndFetchingOperator = function(params) {\n\tvar self = this;\n\n\tvar value = params.value;\n\tvar operator;\n\n\tif (objectUtils.isObjectObject(value)) {\n\t\t// get first query operator\n\t\toperator = _(value).findKey(function(item, operator) {\n\t\t\treturn operator[0] === '$' && self.operators.fetching.has(operator);\n\t\t});\n\n\t\tif (operator) {\n\t\t\tvalue = value[operator];\n\t\t}\n\t}\n\n\treturn this.buildOperator(_.extend({}, params, {\n\t\toperator: operator || params.defaultFetchingOperator,\n\t\tvalue: value,\n\t\tend: true\n\t}));\n};\n\nDialect.prototype.buildStateOperator = function(params) {\n\treturn this.buildOperatorsGroup(_.extend({}, params, {\n\t\tcontext: 'state',\n\t\tcontextOperator: params.operator,\n\t\toperator: '$and',\n\t\tstates: params.states.concat(params.operator)\n\t}));\n};\n\nDialect.prototype.buildOperatorsGroup = function(params) {\n\tvar self = this;\n\n\tvar value = params.value;\n\n\tvar result;\n\tif (objectUtils.isObjectObject(value)) {\n\t\tresult = this.operators.logical.get(params.operator).fn(\n\t\t\t_(value)\n\t\t\t\t.chain()\n\t\t\t\t.map(function(item, operator) {\n\t\t\t\t\tif (operator[0] !== '$') return '';\n\n\t\t\t\t\tif (self.operators.fetching.has(operator)) {\n\t\t\t\t\t\t// convert {a: {$field: 'b'}} to {a: {$eq: {$field: 'b'}}}\n\t\t\t\t\t\titem = _.object([operator], [item]);\n\t\t\t\t\t\toperator = '$eq';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn self.buildOperator(_.extend({}, params, {\n\t\t\t\t\t\toperator: operator,\n\t\t\t\t\t\tvalue: item\n\t\t\t\t\t}));\n\t\t\t\t})\n\t\t\t\t.compact()\n\t\t\t\t.value()\n\t\t);\n\n\t\tif (!result) result = params.field;\n\t} else {\n\t\tresult = this.buildEndFetchingOperator(params);\n\t}\n\n\treturn result;\n};\n\nDialect.prototype.buildOperator = function(params) {\n\tvar isContextValid = function(expectedContexts, context) {\n\t\treturn _.contains(expectedContexts, context);\n\t};\n\n\tvar context = params.context;\n\tvar operator = params.operator;\n\n\tvar result;\n\n\tvar contexts = _(this.operators).mapObject(function(operatorsGroup) {\n\t\treturn operatorsGroup.has(operator);\n\t});\n\n\tif (!_(contexts).some()) {\n\t\tthrow new Error('Unknown operator \"' + operator + '\"');\n\t}\n\n\tif (contexts.logical && isContextValid(['null', 'logical'], context)) {\n\t\tresult = this.buildLogicalOperator(params);\n\t} else if (contexts.fetching && isContextValid(['logical', 'comparison'], context)) {\n\t\tresult = this.buildFetchingOperator(params);\n\t} else if (contexts.comparison && isContextValid(['fetching', 'state'], context)) {\n\t\tresult = this.buildComparisonOperator(params);\n\t} else if (contexts.state && isContextValid(['fetching', 'state'], context)) {\n\t\tresult = this.buildStateOperator(params);\n\t} else {\n\t\tvar errMessage = 'Unexpected operator \"' + operator + '\" at ' +\n\t\t\t(context === 'null' ? 'null ' : '') + 'context';\n\n\t\tif (params.contextOperator) {\n\t\t\terrMessage += ' of operator \"' + params.contextOperator + '\"';\n\t\t}\n\n\t\tthrow new Error(errMessage);\n\t}\n\n\treturn result;\n};\n\nDialect.prototype.buildCondition = function(params) {\n\treturn this.buildOperator({\n\t\tcontext: 'null',\n\t\toperator: '$and',\n\t\tvalue: params.value,\n\t\tstates: [],\n\t\tdefaultFetchingOperator: params.defaultFetchingOperator\n\t});\n};\n\nDialect.prototype.buildModifier = function(params) {\n\tvar self = this;\n\n\treturn _(params.modifier)\n\t\t.chain()\n\t\t.map(function(values, field) {\n\t\t\tvar modifier;\n\n\t\t\tif (field[0] === '$') {\n\t\t\t\tmodifier = field;\n\t\t\t} else {\n\t\t\t\tmodifier = '$set';\n\t\t\t\tvalues = _.object([field], [values]);\n\t\t\t}\n\n\t\t\tvar modifierFn = self.modifiers.get(modifier);\n\n\t\t\tif (!modifierFn) {\n\t\t\t\tthrow new Error('Unknown modifier \"' + modifier + '\"');\n\t\t\t}\n\n\t\t\treturn _(values).map(function(value, field) {\n\t\t\t\tfield = self._wrapIdentifier(field);\n\t\t\t\tvalue = self.buildBlock('term', {term: value, type: 'value'});\n\n\t\t\t\treturn modifierFn(field, value);\n\t\t\t});\n\t\t})\n\t\t.flatten()\n\t\t.compact()\n\t\t.value()\n\t\t.join(', ');\n};\n\nDialect.prototype.buildBlock = function(block, params) {\n\tvar blockFn = this.blocks.get(block);\n\n\tif (!blockFn) {\n\t\tthrow new Error('Unknown block \"' + block + '\"');\n\t}\n\n\treturn blockFn(params);\n};\n\nDialect.prototype.buildTemplate = function(type, params) {\n\tvar self = this;\n\n\tvar template = this.templates.get(type);\n\tif (!template) {\n\t\tthrow new Error('Unknown template type \"' + type + '\"');\n\t}\n\n\tparams = _.defaults({}, params, template.defaults);\n\n\tif (template.validate) {\n\t\ttemplate.validate(type, params);\n\t}\n\n\treturn template.pattern.replace(blockRegExp, function(fullMatch, block, space) {\n\t\tif (_.isUndefined(params[block])) {\n\t\t\treturn '';\n\t\t} else {\n\t\t\tif (self.blocks.has(type + ':' + block)) block = type + ':' + block;\n\t\t\treturn self.buildBlock(block, params) + space;\n\t\t}\n\t}).trim();\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/utils/valuesStore.js":"'use strict';\n\nmodule.exports = ValuesStore;\n\nfunction ValuesStore(options) {\n\toptions = options || {};\n\tthis._values = options.values || {};\n}\n\nValuesStore.prototype.add = ValuesStore.prototype.set = function(name, value) {\n\tthis._values[name] = value;\n};\n\nValuesStore.prototype.get = function(name) {\n\treturn this._values[name] || null;\n};\n\nValuesStore.prototype.remove = function(name) {\n\tdelete this._values[name];\n};\n\nValuesStore.prototype.has = function(name) {\n\treturn this._values.hasOwnProperty(name);\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/utils/object.js":"'use strict';\n\nvar _ = require('underscore');\n\n// check if object contains any of expected keys\nexports.hasSome = function(obj, keys) {\n\tvar objKeys = _(obj).keys();\n\treturn _(keys).some(function(key) {\n\t\treturn _(objKeys).contains(key);\n\t});\n};\n\nexports.isSimpleValue = function(value) {\n\treturn (\n\t\t_.isString(value) ||\n\t\t_.isNumber(value) ||\n\t\t_.isBoolean(value) ||\n\t\t_.isNull(value) ||\n\t\t_.isUndefined(value) ||\n\t\t_.isRegExp(value) ||\n\t\t_.isDate(value)\n\t);\n};\n\nexports.isObjectObject = function(obj) {\n\treturn _.isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/base/templates.js":"'use strict';\n\nvar _ = require('underscore');\nvar templateChecks = require('../../utils/templateChecks');\n\nmodule.exports = function(dialect) {\n\tvar availableJoinTypes = ['natural', 'cross', 'inner', 'outer', 'left', 'right', 'full', 'self'];\n\tvar orRegExp = /^(rollback|abort|replace|fail|ignore)$/i;\n\n\t// private templates\n\n\tdialect.templates.add('query', {\n\t\tpattern: '{queryBody}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.requiredProp(type, params, 'queryBody');\n\t\t\ttemplateChecks.propType(type, params, 'queryBody', 'object');\n\t\t}\n\t});\n\n\n\tdialect.templates.add('subQuery', {\n\t\tpattern: '({queryBody})',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.requiredProp(type, params, 'queryBody');\n\t\t\ttemplateChecks.propType(type, params, 'queryBody', 'object');\n\t\t}\n\t});\n\n\n\tdialect.templates.add('queriesCombination', {\n\t\tpattern: '{with} {withRecursive} {queries} {sort} {limit} {offset}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n\t\t\ttemplateChecks.propType(type, params, 'with', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'withRecursive', 'object');\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'queries');\n\t\t\ttemplateChecks.propType(type, params, 'queries', 'array');\n\t\t\ttemplateChecks.minPropLength(type, params, 'queries', 2);\n\n\t\t\ttemplateChecks.propType(type, params, 'sort', ['string', 'array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'limit', ['number', 'string']);\n\n\t\t\ttemplateChecks.propType(type, params, 'offset', ['number', 'string']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('insertValues', {\n\t\tpattern: '({fields}) values {values}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.requiredProp('values', params, 'fields');\n\t\t\ttemplateChecks.propType('values', params, 'fields', 'array');\n\t\t\ttemplateChecks.minPropLength('values', params, 'fields', 1);\n\n\t\t\ttemplateChecks.requiredProp('values', params, 'values');\n\t\t\ttemplateChecks.propType('values', params, 'values', 'array');\n\t\t\ttemplateChecks.minPropLength('values', params, 'values', 1);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('joinItem', {\n\t\tpattern: '{type} join {table} {query} {select} {expression} {alias} {on}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.propType('join', params, 'type', 'string');\n\t\t\ttemplateChecks.customProp('join', params, 'type', function(value) {\n\t\t\t\tvar splitType = _(value.toLowerCase().split(' ')).compact();\n\t\t\t\treturn !_.difference(splitType, availableJoinTypes).length;\n\t\t\t});\n\n\t\t\ttemplateChecks.atLeastOneOfProps('join', params, ['table', 'query', 'select', 'expression']);\n\t\t\ttemplateChecks.onlyOneOfProps('join', params, ['table', 'query', 'select', 'expression']);\n\n\t\t\ttemplateChecks.propType('join', params, 'table', 'string');\n\t\t\ttemplateChecks.propType('join', params, 'query', 'object');\n\t\t\ttemplateChecks.propType('join', params, 'select', 'object');\n\t\t\ttemplateChecks.propType('join', params, 'expression', ['string', 'object']);\n\n\t\t\ttemplateChecks.propType('join', params, 'alias', ['string', 'object']);\n\n\t\t\ttemplateChecks.propType('join', params, 'on', ['array', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('withItem', {\n\t\tpattern: '{name} {fields} as {query} {select} {expression}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.requiredProp('with', params, 'name');\n\t\t\ttemplateChecks.propType('with', params, 'name', 'string');\n\n\t\t\ttemplateChecks.propType(type, params, 'fields', ['array', 'object']);\n\n\t\t\ttemplateChecks.atLeastOneOfProps('with', params, ['query', 'select', 'expression']);\n\t\t\ttemplateChecks.onlyOneOfProps('with', params, ['query', 'select', 'expression']);\n\n\t\t\ttemplateChecks.propType('with', params, 'query', 'object');\n\t\t\ttemplateChecks.propType('with', params, 'select', 'object');\n\t\t\ttemplateChecks.propType('with', params, 'expression', ['string', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('fromItem', {\n\t\tpattern: '{table} {query} {select} {expression} {alias}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.atLeastOneOfProps('from', params, ['table', 'query', 'select', 'expression']);\n\t\t\ttemplateChecks.onlyOneOfProps('from', params, ['table', 'query', 'select', 'expression']);\n\n\t\t\ttemplateChecks.propType('from', params, 'table', 'string');\n\t\t\ttemplateChecks.propType('from', params, 'query', 'object');\n\t\t\ttemplateChecks.propType('from', params, 'select', 'object');\n\t\t\ttemplateChecks.propType('from', params, 'expression', ['string', 'object']);\n\n\t\t\ttemplateChecks.propType('from', params, 'alias', ['string', 'object']);\n\t\t}\n\t});\n\n\n\t// public templates\n\n\tdialect.templates.add('select', {\n\t\tpattern: '{with} {withRecursive} select {distinct} {fields} ' +\n\t\t\t'from {from} {table} {query} {select} {expression} {alias} ' +\n\t\t\t'{join} {condition} {group} {having} {sort} {limit} {offset}',\n\t\tdefaults: {\n\t\t\tfields: {}\n\t\t},\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n\t\t\ttemplateChecks.propType(type, params, 'with', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'withRecursive', 'object');\n\n\t\t\ttemplateChecks.propType(type, params, 'distinct', 'boolean');\n\n\t\t\ttemplateChecks.propType(type, params, 'fields', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'from', ['string', 'array', 'object']);\n\n\t\t\ttemplateChecks.atLeastOneOfProps(type, params, ['table', 'query', 'select', 'expression']);\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['table', 'query', 'select', 'expression']);\n\n\t\t\ttemplateChecks.propType(type, params, 'table', 'string');\n\t\t\ttemplateChecks.propType(type, params, 'query', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'select', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'expression', ['string', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'alias', ['string', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'join', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'condition', ['array', 'object']);\n\t\t\ttemplateChecks.propType(type, params, 'having', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'group', ['string', 'array']);\n\n\t\t\ttemplateChecks.propType(type, params, 'sort', ['string', 'array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'limit', ['number', 'string']);\n\n\t\t\ttemplateChecks.propType(type, params, 'offset', ['number', 'string']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('insert', {\n\t\tpattern: '{with} {withRecursive} insert {or} into {table} {values} {condition} ' +\n\t\t\t'{returning}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n\t\t\ttemplateChecks.propType(type, params, 'with', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'withRecursive', 'object');\n\n\t\t\ttemplateChecks.propType(type, params, 'or', 'string');\n\t\t\ttemplateChecks.propMatch(type, params, 'or', orRegExp);\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'table');\n\t\t\ttemplateChecks.propType(type, params, 'table', 'string');\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'values');\n\t\t\ttemplateChecks.propType(type, params, 'values', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'condition', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'returning', ['array', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('update', {\n\t\tpattern: '{with} {withRecursive} update {or} {table} {alias} {modifier} {condition} {returning}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n\t\t\ttemplateChecks.propType(type, params, 'with', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'withRecursive', 'object');\n\n\t\t\ttemplateChecks.propType(type, params, 'or', 'string');\n\t\t\ttemplateChecks.propMatch(type, params, 'or', orRegExp);\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'table');\n\t\t\ttemplateChecks.propType(type, params, 'table', 'string');\n\n\t\t\ttemplateChecks.propType(type, params, 'alias', 'string');\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'modifier');\n\t\t\ttemplateChecks.propType(type, params, 'modifier', 'object');\n\n\t\t\ttemplateChecks.propType(type, params, 'condition', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'returning', ['array', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('remove', {\n\t\tpattern: '{with} {withRecursive} delete from {table} {alias} {condition} {returning}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['with', 'withRecursive']);\n\t\t\ttemplateChecks.propType(type, params, 'with', 'object');\n\t\t\ttemplateChecks.propType(type, params, 'withRecursive', 'object');\n\n\t\t\ttemplateChecks.requiredProp(type, params, 'table');\n\t\t\ttemplateChecks.propType(type, params, 'table', 'string');\n\n\t\t\ttemplateChecks.propType(type, params, 'alias', 'string');\n\n\t\t\ttemplateChecks.propType(type, params, 'condition', ['array', 'object']);\n\n\t\t\ttemplateChecks.propType(type, params, 'returning', ['array', 'object']);\n\t\t}\n\t});\n\n\n\tdialect.templates.add('union', dialect.templates.get('queriesCombination'));\n\n\n\tdialect.templates.add('intersect', dialect.templates.get('queriesCombination'));\n\n\n\tdialect.templates.add('except', dialect.templates.get('queriesCombination'));\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/utils/templateChecks.js":"'use strict';\n\nvar _ = require('underscore');\n\nexports.requiredProp = function(type, params, propName) {\n\tif (_.isUndefined(params[propName])) {\n\t\tthrow new Error('`' + propName + '` property is not set in `' + type + '` clause');\n\t}\n};\n\nexports.atLeastOneOfProps = function(type, params, expectedPropNames) {\n\tvar propNames = _(params).chain().keys().intersection(expectedPropNames).value();\n\n\tif (!propNames.length) {\n\t\tthrow new Error('Neither `' + expectedPropNames.join('`, `') +\n\t\t\t'` properties are not set in `' + type + '` clause');\n\t}\n};\n\nexports.onlyOneOfProps = function(type, params, expectedPropNames) {\n\tvar propNames = _(params).chain().keys().intersection(expectedPropNames).value();\n\n\tif (propNames.length > 1) {\n\t\tthrow new Error('Wrong using `' + propNames.join('`, `') + '` properties together in `' +\n\t\t\ttype + '` clause');\n\t}\n};\n\nexports.propType = function(type, params, propName, expectedTypes) {\n\tif (_.isUndefined(params[propName])) return;\n\n\tvar propValue = params[propName];\n\n\tif (!_.isArray(expectedTypes)) expectedTypes = [expectedTypes];\n\n\tvar hasSomeType = _(expectedTypes).some(function(expectedType) {\n\t\treturn _['is' + expectedType.charAt(0).toUpperCase() + expectedType.slice(1)](propValue);\n\t});\n\n\tif (!hasSomeType) {\n\t\tthrow new Error('`' + propName + '` property should have ' +\n\t\t\t(expectedTypes.length > 1 ? 'one of expected types:' : 'type') +\n\t\t\t' \"' + expectedTypes.join('\", \"') + '\" in `' + type + '` clause');\n\t}\n};\n\nexports.minPropLength = function(type, params, propName, length) {\n\tif (_.isUndefined(params[propName])) return;\n\n\tif (params[propName].length < length) {\n\t\tthrow new Error('`' + propName + '` property should not have length less than ' + length +\n\t\t\t' in `' + type + '` clause');\n\t}\n};\n\nexports.propMatch = function(type, params, propName, regExp) {\n\tif (_.isUndefined(params[propName])) return;\n\n\tif (!params[propName].match(regExp)) {\n\t\tthrow new Error('Invalid `' + propName + '` property value \"' + params[propName] + '\" in `' +\n\t\t\ttype + '` clause');\n\t}\n};\n\nexports.customProp = function(type, params, propName, fn) {\n\tif (_.isUndefined(params[propName])) return;\n\n\tif (!fn(params[propName])) {\n\t\tthrow new Error('Invalid `' + propName + '` property value \"' + params[propName] + '\" in `' +\n\t\t\ttype + '` clause');\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/base/blocks.js":"'use strict';\n\nvar _ = require('underscore');\nvar objectUtils = require('../../utils/object');\n\nvar removeTopBrackets = function(condition) {\n\tif (condition.length && condition[0] === '(' &&\n\t\tcondition[condition.length - 1] === ')') {\n\t\tcondition = condition.slice(1, condition.length - 1);\n\t}\n\n\treturn condition;\n};\n\nvar termKeys = ['select', 'query', 'field', 'value', 'func', 'expression'];\nvar isTerm = function(obj) {\n\treturn objectUtils.isObjectObject(obj) && objectUtils.hasSome(obj, termKeys);\n};\n\nmodule.exports = function(dialect) {\n\tdialect.blocks.add('distinct', function() {\n\t\treturn 'distinct';\n\t});\n\n\tdialect.blocks.add('fields', function(params) {\n\t\tvar fields = params.fields || {};\n\n\t\tif (!_.isObject(fields)) {\n\t\t\tthrow new Error('Invalid `fields` property type \"' + (typeof fields) + '\"');\n\t\t}\n\n\t\tif (_.isEmpty(fields)) return '*';\n\n\t\t// If fields is array: ['a', {b: 'c'}, {name: '', table: 't', alias: 'r'}]\n\t\tif (_.isArray(fields)) {\n\t\t\tfields = _(fields).map(function(field) {\n\t\t\t\tif (objectUtils.isSimpleValue(field) || isTerm(field) || _.has(field, 'name')) {\n\t\t\t\t\t// if field has simple type or is field object: {name: '', table: 't', alias: 'r'}\n\t\t\t\t\treturn dialect.buildBlock('term', {term: field, type: 'field'});\n\t\t\t\t} else {\n\t\t\t\t\t// if field is non-field object: {b: 'c'}\n\t\t\t\t\treturn dialect.buildBlock('fields', {fields: field});\n\t\t\t\t}\n\t\t\t});\n\n\t\t// If fields is object: {a: 'u', b: {table: 't', alias: 'c'}}\n\t\t} else {\n\t\t\t// use keys as field names\n\t\t\tfields = _(fields).map(function(field, name) {\n\t\t\t\t// if field is not an object value, use it as alias\n\t\t\t\tif (_.isString(field)) field = {alias: field};\n\n\t\t\t\t// if field does not have name, get it from key\n\t\t\t\tif (!_.has(field, 'name')) field = _.defaults({name: name}, field);\n\n\t\t\t\treturn dialect.buildBlock('term', {term: field, type: 'field'});\n\t\t\t});\n\t\t}\n\n\t\treturn _(fields).compact().join(', ');\n\t});\n\n\tdialect.blocks.add('term', function(params) {\n\t\tvar term = params.term;\n\t\tvar type = params.type || 'field';\n\n\t\tvar isSimpleValue = objectUtils.isSimpleValue(term);\n\t\tvar isArray = _.isArray(term);\n\n\t\tif (isSimpleValue && !_.isString(term) || isArray) type = 'value';\n\n\t\tif (isSimpleValue || !isTerm(term) || isArray) {\n\t\t\tterm = _(term).chain().pick('cast', 'alias').extend(_.object([type], [term])).value();\n\t\t}\n\n\t\ttype = _(termKeys).find(function(key) {\n\t\t\treturn _.has(term, key);\n\t\t});\n\n\t\tvar result = dialect.buildBlock(type, _(term).pick(type));\n\n\t\tif (_.has(term, 'cast')) {\n\t\t\tresult = 'cast(' + result + ' as ' + term.cast + ')';\n\t\t}\n\n\t\tif (_.has(term, 'alias')) {\n\t\t\tresult += ' ' + dialect.buildBlock('alias', {alias: term.alias});\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('table', function(params) {\n\t\treturn dialect.buildBlock('name', {name: params.table});\n\t});\n\n\tdialect.blocks.add('func', function(params) {\n\t\tvar func = params.func;\n\n\t\tif (_.isString(func)) func = {name: func};\n\n\t\tif (!_.isObject(func)) {\n\t\t\tthrow new Error('Invalid `func` property type \"' + (typeof func) + '\"');\n\t\t}\n\n\t\tif (!_.has(func, 'name')) {\n\t\t\tthrow new Error('`func.name` property is required');\n\t\t}\n\n\t\tvar args = '';\n\n\t\tif (_.isArray(func.args)) {\n\t\t\targs = _(func.args).map(function(arg) {\n\t\t\t\treturn dialect.buildBlock('term', {term: arg, type: 'value'});\n\t\t\t}).join(', ');\n\t\t}\n\n\t\treturn func.name + '(' + args + ')';\n\t});\n\n\tdialect.blocks.add('expression', function(params) {\n\t\tvar expression = params.expression;\n\n\t\tif (_.isString(expression)) expression = {pattern: expression};\n\n\t\tif (!_.isObject(expression)) {\n\t\t\tthrow new Error('Invalid `expression` property type \"' + (typeof expression) + '\"');\n\t\t}\n\n\t\tif (!_.has(expression, 'pattern')) {\n\t\t\tthrow new Error('`expression.pattern` property is required');\n\t\t}\n\n\t\tvar values = expression.values || {};\n\n\t\treturn expression.pattern.replace(/\\{([a-z0-9]+)\\}/ig, function(fullMatch, block) {\n\t\t\tif (!_.has(values, block)) {\n\t\t\t\tthrow new Error('Field `' + block + '` is required in `expression.values` property');\n\t\t\t}\n\n\t\t\treturn dialect.buildBlock('term', {term: values[block], type: 'value'});\n\t\t}).trim();\n\t});\n\n\tdialect.blocks.add('field', function(params) {\n\t\tvar field = params.field;\n\n\t\tif (_.isString(field)) field = {name: field};\n\n\t\tif (!_.isObject(field)) {\n\t\t\tthrow new Error('Invalid `field` property type \"' + (typeof field) + '\"');\n\t\t}\n\n\t\tif (!_.has(field, 'name')) {\n\t\t\tthrow new Error('`field.name` property is required');\n\t\t}\n\n\t\tvar result = dialect.buildBlock('name', {name: field.name});\n\n\t\tif (_.has(field, 'table')) {\n\t\t\tresult = dialect.buildBlock('table', {table: field.table}) + '.' + result;\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('value', function(params) {\n\t\tvar value = params.value;\n\t\tif (_.isRegExp(value)) value = value.source;\n\t\treturn dialect.builder._pushValue(value);\n\t});\n\n\tdialect.blocks.add('name', function(params) {\n\t\treturn dialect._wrapIdentifier(params.name);\n\t});\n\n\tdialect.blocks.add('alias', function(params) {\n\t\tvar alias = params.alias;\n\n\t\tif (_.isString(alias)) alias = {name: alias};\n\n\t\tif (!_.isObject(alias)) {\n\t\t\tthrow new Error('Invalid `alias` property type \"' + (typeof alias) + '\"');\n\t\t}\n\t\tif (!_.has(alias, 'name')) {\n\t\t\tthrow new Error('`alias.name` property is required');\n\t\t}\n\n\t\tvar result = 'as ' + dialect._wrapIdentifier(alias.name);\n\n\t\tif (_.isArray(alias.columns)) {\n\t\t\tresult += '(' + _(alias.columns).map(function(column) {\n\t\t\t\treturn dialect._wrapIdentifier(column);\n\t\t\t}).join(', ') + ')';\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('condition', function(params) {\n\t\tvar result = dialect.buildCondition({\n\t\t\tvalue: params.condition,\n\t\t\tdefaultFetchingOperator: '$value'\n\t\t});\n\n\t\tif (result) {\n\t\t\tresult = 'where ' + removeTopBrackets(result);\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('modifier', function(params) {\n\t\tvar result = dialect.buildModifier({\n\t\t\tmodifier: params.modifier\n\t\t});\n\n\t\tif (result) {\n\t\t\tresult = 'set ' + result;\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('join', function(params) {\n\t\tvar join = params.join;\n\t\tvar result = '';\n\n\t\t// if join is array -> make each joinItem\n\t\tif (_.isArray(join)) {\n\t\t\tresult = _(join).map(function(joinItem) {\n\t\t\t\treturn dialect.buildTemplate('joinItem', joinItem);\n\t\t\t}).join(' ');\n\n\t\t// if join is object -> set table name from key and make each joinItem\n\t\t} else if (_.isObject(join)) {\n\t\t\tresult = _(join).map(function(joinItem, table) {\n\t\t\t\tif (!objectUtils.hasSome(joinItem, ['table', 'query', 'select', 'expression'])) {\n\t\t\t\t\tjoinItem = _.defaults({table: table}, joinItem);\n\t\t\t\t}\n\n\t\t\t\treturn dialect.buildTemplate('joinItem', joinItem);\n\t\t\t}).join(' ');\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('joinItem:type', function(params) {\n\t\treturn params.type.toLowerCase();\n\t});\n\n\tdialect.blocks.add('joinItem:on', function(params) {\n\t\t// `on` block is use `$field` as default query operator because it most used case\n\t\tvar result = dialect.buildCondition({\n\t\t\tvalue: params.on,\n\t\t\tdefaultFetchingOperator: '$field'\n\t\t});\n\n\t\tif (result) {\n\t\t\tresult = 'on ' + removeTopBrackets(result);\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('group', function(params) {\n\t\tvar group = params.group;\n\t\tvar result = '';\n\n\t\tif (_.isString(group)) group = [group];\n\n\t\tif (_.isArray(group)) {\n\t\t\tresult = _(group).map(function(field) {\n\t\t\t\treturn dialect._wrapIdentifier(field);\n\t\t\t}).join(', ');\n\t\t}\n\n\t\tif (result) {\n\t\t\tresult = 'group by ' + result;\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('having', function(params) {\n\t\tvar result = dialect.buildCondition({\n\t\t\tvalue: params.having,\n\t\t\tdefaultFetchingOperator: '$value'\n\t\t});\n\n\t\tif (result) {\n\t\t\tresult = 'having ' + removeTopBrackets(result);\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('sort', function(params) {\n\t\tvar sort = params.sort;\n\t\tvar result = '';\n\n\t\tif (_.isString(sort)) sort = [sort];\n\n\t\tif (_.isArray(sort)) {\n\t\t\tresult = _(sort).map(function(sortField) {\n\t\t\t\treturn dialect._wrapIdentifier(sortField);\n\t\t\t}).join(', ');\n\t\t} else if (_.isObject(sort)) {\n\t\t\tresult = _(sort).map(function(direction, field) {\n\t\t\t\treturn dialect._wrapIdentifier(field) + ' ' + (direction > 0 ? 'asc' : 'desc');\n\t\t\t}).join(', ');\n\t\t}\n\n\t\tif (result) {\n\t\t\tresult = 'order by ' + result;\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('limit', function(params) {\n\t\treturn 'limit ' + dialect.builder._pushValue(params.limit);\n\t});\n\n\tdialect.blocks.add('offset', function(params) {\n\t\treturn 'offset ' + dialect.builder._pushValue(params.offset);\n\t});\n\n\tdialect.blocks.add('or', function(params) {\n\t\treturn 'or ' + params.or;\n\t});\n\n\tdialect.blocks.add('insert:values', function(params) {\n\t\tvar values = params.values;\n\n\t\tif (!_.isArray(values)) values = [values];\n\n\t\tvar fields = params.fields || _(values)\n\t\t\t.chain()\n\t\t\t.map(function(row) {\n\t\t\t\treturn _(row).keys();\n\t\t\t})\n\t\t\t.flatten()\n\t\t\t.uniq()\n\t\t\t.value();\n\n\t\treturn dialect.buildTemplate('insertValues', {\n\t\t\tfields: fields,\n\t\t\tvalues: _(values).map(function(row) {\n\t\t\t\treturn _(fields).map(function(field) {\n\t\t\t\t\treturn dialect.buildBlock('value', {value: row[field]});\n\t\t\t\t});\n\t\t\t})\n\t\t});\n\t});\n\n\tdialect.blocks.add('insertValues:values', function(params) {\n\t\treturn _(params.values).map(function(row) {\n\t\t\treturn '(' + row.join(', ') + ')';\n\t\t}).join(', ');\n\t});\n\n\tdialect.blocks.add('queryBody', function(params) {\n\t\tvar queryBody = params.queryBody || {};\n\n\t\treturn dialect.buildTemplate(queryBody.type || 'select', queryBody);\n\t});\n\n\tdialect.blocks.add('query', function(params) {\n\t\treturn dialect.buildTemplate('subQuery', {queryBody: params.query});\n\t});\n\n\tdialect.blocks.add('select', function(params) {\n\t\treturn dialect.buildTemplate('subQuery', {queryBody: params.select});\n\t});\n\n\tdialect.blocks.add('queries', function(params) {\n\t\treturn _(params.queries).map(function(query) {\n\t\t\treturn dialect.buildTemplate('subQuery', {queryBody: query});\n\t\t}).join(' ' + params.type + (params.all ? ' all' : '') + ' ');\n\t});\n\n\tfunction buildWith(withList) {\n\t\tvar result = '';\n\n\t\t// if with clause is array -> make each withItem\n\t\tif (_.isArray(withList)) {\n\t\t\tresult = _(withList).map(function(withItem) {\n\t\t\t\treturn dialect.buildTemplate('withItem', withItem);\n\t\t\t}).join(', ');\n\n\t\t// if with clause is object -> set name from key and make each withItem\n\t\t} else if (_.isObject(withList)) {\n\t\t\tresult = _(withList).map(function(withItem, name) {\n\t\t\t\tif (!withItem.name) {\n\t\t\t\t\twithItem = _.clone(withItem);\n\t\t\t\t\twithItem.name = name;\n\t\t\t\t}\n\t\t\t\treturn dialect.buildTemplate('withItem', withItem);\n\t\t\t}).join(', ');\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tdialect.blocks.add('with', function(params) {\n\t\tvar result = buildWith(params['with']);\n\n\t\tif (result) result = 'with ' + result;\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('withRecursive', function(params) {\n\t\tvar result = buildWith(params.withRecursive);\n\n\t\tif (result) result = 'with recursive ' + result;\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('returning', function(params) {\n\t\tvar result = dialect.buildBlock('fields', {fields: params.returning});\n\n\t\tif (result) result = 'returning ' + result;\n\n\t\treturn result;\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/base/operators/index.js":"'use strict';\n\nvar comparisonOperatorsInit = require('./comparison');\nvar logicalOperatorsInit = require('./logical');\nvar fetchingOperatorsInit = require('./fetching');\nvar stateOperatorsInit = require('./state');\n\nmodule.exports = function(dialect) {\n\tcomparisonOperatorsInit(dialect);\n\tlogicalOperatorsInit(dialect);\n\tfetchingOperatorsInit(dialect);\n\tstateOperatorsInit(dialect);\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/base/operators/comparison.js":"'use strict';\n\nvar buildComparisonOperator = function(field, operator, value) {\n\treturn [field, operator, value].join(' ');\n};\n\nvar buildBooleanOperator = function(field, operator, value) {\n\treturn buildComparisonOperator(field, 'is' + (value ? '' : ' not'), operator);\n};\n\nmodule.exports = function(dialect) {\n\tdialect.operators.comparison.add('$eq', {\n\t\tinversedOperator: '$ne',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '=', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$ne', {\n\t\tinversedOperator: '$eq',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '!=', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$gt', {\n\t\tinversedOperator: '$lte',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '>', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$lt', {\n\t\tinversedOperator: '$gte',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '<', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$gte', {\n\t\tinversedOperator: '$lt',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '>=', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$lte', {\n\t\tinversedOperator: '$gt',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '<=', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$is', {\n\t\tinversedOperator: '$isNot',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'is', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$isNot', {\n\t\tinversedOperator: '$is',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'is not', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$isDistinct', {\n\t\tinversedOperator: '$isNotDistinct',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'is distinct from', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$isNotDistinct', {\n\t\tinversedOperator: '$isDistinct',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'is not distinct from', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$like', {\n\t\tinversedOperator: '$nlike',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'like', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nlike', {\n\t\tinversedOperator: '$like',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'not like', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$similarTo', {\n\t\tinversedOperator: '$nsimilarTo',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'similar to', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nsimilarTo', {\n\t\tinversedOperator: '$similarTo',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'not similar to', value);\n\t\t}\n\t});\n\n\n\tdialect.operators.comparison.add('$match', {\n\t\tinversedOperator: '$nmatch',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '~', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nmatch', {\n\t\tinversedOperator: '$match',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '!~', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$imatch', {\n\t\tinversedOperator: '$nimatch',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '~*', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nimatch', {\n\t\tinversedOperator: '$imatch',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '!~*', value);\n\t\t}\n\t});\n\n\n\tdialect.operators.comparison.add('$null', {\n\t\tinversedOperator: '$nnull',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'null', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nnull', {\n\t\tinversedOperator: '$null',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'null', !value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$true', {\n\t\tinversedOperator: '$ntrue',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'true', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$ntrue', {\n\t\tinversedOperator: '$true',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'true', !value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$false', {\n\t\tinversedOperator: '$nfalse',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'false', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nfalse', {\n\t\tinversedOperator: '$false',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'false', !value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$unknown', {\n\t\tinversedOperator: '$nunknown',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'unknown', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nunknown', {\n\t\tinversedOperator: '$unknown',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'unknown', !value);\n\t\t}\n\t});\n\n\n\tdialect.operators.comparison.add('$in', {\n\t\tinversedOperator: '$nin',\n\t\tdefaultFetchingOperator: '$inValues',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'in', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nin', {\n\t\tinversedOperator: '$in',\n\t\tdefaultFetchingOperator: '$inValues',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'not in', value);\n\t\t}\n\t});\n\n\n\tdialect.operators.comparison.add('$between', {\n\t\tinversedOperator: '$nbetween',\n\t\tdefaultFetchingOperator: '$betweenValues',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'between', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nbetween', {\n\t\tinversedOperator: '$between',\n\t\tdefaultFetchingOperator: '$betweenValues',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'not between', value);\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/base/operators/logical.js":"'use strict';\n\nfunction buildLogicalOperator(operator, values) {\n\tif (!values.length) return '';\n\n\tvar result = values.join(' ' + operator + ' ');\n\tif (values.length > 1) result = '(' + result + ')';\n\n\treturn result;\n}\n\nmodule.exports = function(dialect) {\n\tdialect.operators.logical.add('$and', {\n\t\tfn: function(values) {\n\t\t\treturn buildLogicalOperator('and', values);\n\t\t}\n\t});\n\n\tdialect.operators.logical.add('$or', {\n\t\tfn: function(values) {\n\t\t\treturn buildLogicalOperator('or', values);\n\t\t}\n\t});\n\n\tdialect.operators.logical.add('$not', {\n\t\tfn: function(values) {\n\t\t\treturn 'not ' + buildLogicalOperator('and', values);\n\t\t}\n\t});\n\n\tdialect.operators.logical.add('$nor', {\n\t\tfn: function(values) {\n\t\t\treturn 'not ' + buildLogicalOperator('or', values);\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/base/operators/fetching.js":"'use strict';\n\nvar _ = require('underscore');\n\nmodule.exports = function(dialect) {\n\tdialect.operators.fetching.add('$field', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'field'});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$value', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'value'});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$func', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'func'});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$expression', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'expression'});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$select', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildTemplate('subQuery', {queryBody: value});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$query', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildTemplate('subQuery', {queryBody: value});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$boolean', {\n\t\tfn: function(value) {\n\t\t\treturn Boolean(value);\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$inValues', {\n\t\tfn: function(value) {\n\t\t\tif (!_.isObject(value)) {\n\t\t\t\tthrow new Error('Invalid `$in/$nin` value type \"' + (typeof value) + '\"');\n\t\t\t}\n\n\t\t\tif (_.isArray(value)) {\n\t\t\t\tif (!value.length) value = [null];\n\n\t\t\t\treturn '(' + _(value).map(function(item) {\n\t\t\t\t\treturn dialect.builder._pushValue(item);\n\t\t\t\t}).join(', ') + ')';\n\t\t\t} else {\n\t\t\t\treturn dialect.buildTemplate('subQuery', {queryBody: value});\n\t\t\t}\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$betweenValues', {\n\t\tfn: function(value) {\n\t\t\tif (!_.isArray(value)) {\n\t\t\t\tthrow new Error('Invalid `$between` value type \"' + (typeof value) + '\"');\n\t\t\t}\n\n\t\t\tif (value.length < 2) {\n\t\t\t\tthrow new Error('`$between` array length should be 2 or greater');\n\t\t\t}\n\n\t\t\treturn dialect.builder._pushValue(value[0]) + ' and ' + dialect.builder._pushValue(value[1]);\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/base/operators/state.js":"'use strict';\n\nmodule.exports = function(dialect) {\n\tdialect.operators.state.add('$not', {\n\t\tgetOperator: function(operator) {\n\t\t\tvar operatorParams = dialect.operators.comparison.get(operator);\n\n\t\t\tif (!operatorParams || !operatorParams.inversedOperator) {\n\t\t\t\tthrow new Error('Cannot get inversed operator for operator `' + operator +'`');\n\t\t\t}\n\n\t\t\treturn operatorParams.inversedOperator;\n\t\t}\n\t});\n};","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/base/modifiers.js":"'use strict';\n\nmodule.exports = function(dialect) {\n\tdialect.modifiers.add('$set', function(field, value) {\n\t\treturn [field, '=', value].join(' ');\n\t});\n\n\tdialect.modifiers.add('$inc', function(field, value) {\n\t\treturn [field, '=', field, '+', value].join(' ');\n\t});\n\n\tdialect.modifiers.add('$dec', function(field, value) {\n\t\treturn [field, '=', field, '-', value].join(' ');\n\t});\n\n\tdialect.modifiers.add('$mul', function(field, value) {\n\t\treturn [field, '=', field, '*', value].join(' ');\n\t});\n\n\tdialect.modifiers.add('$div', function(field, value) {\n\t\treturn [field, '=', field, '/', value].join(' ');\n\t});\n\n\tdialect.modifiers.add('$default', function(field) {\n\t\treturn [field, '=', 'default'].join(' ');\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/mssql/index.js":"'use strict';\n\nvar BaseDialect = require('../base');\nvar _ = require('underscore');\nvar util = require('util');\n\nvar Dialect = module.exports = function(builder) {\n\tBaseDialect.call(this, builder);\n};\n\nutil.inherits(Dialect, BaseDialect);\n\nDialect.prototype.config = _({}).extend(BaseDialect.prototype.config, {});\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/postgresql/index.js":"'use strict';\n\nvar BaseDialect = require('../base');\nvar\t_ = require('underscore');\nvar\tutil = require('util');\n\nvar templatesInit = require('./templates');\nvar blocksInit = require('./blocks');\nvar operatorsInit = require('./operators');\n\nvar Dialect = module.exports = function(builder) {\n\tBaseDialect.call(this, builder);\n\n\t// init templates\n\ttemplatesInit(this);\n\n\t// init blocks\n\tblocksInit(this);\n\n\t// init operators\n\toperatorsInit(this);\n};\n\nutil.inherits(Dialect, BaseDialect);\n\nDialect.prototype.config = _({\n\tjsonSeparatorRegexp: /->>?/g\n}).extend(BaseDialect.prototype.config);\n\nDialect.prototype._wrapIdentifier = function(name) {\n\t// split by json separator\n\tvar nameParts = name.split(this.config.jsonSeparatorRegexp);\n\tvar separators = name.match(this.config.jsonSeparatorRegexp);\n\n\t// wrap base identifier\n\tvar identifier = BaseDialect.prototype._wrapIdentifier.call(this, nameParts[0]);\n\n\t// wrap all json identifier and join them with separators\n\tidentifier += _(separators).reduce(function(memo, separator, index) {\n\t\treturn memo + separator + '\\'' + nameParts[index + 1] + '\\'';\n\t}, '');\n\n\treturn identifier;\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/postgresql/templates.js":"'use strict';\n\nvar _ = require('underscore');\nvar templateChecks = require('../../utils/templateChecks');\n\nmodule.exports = function(dialect) {\n\tvar explainFormatRegExp = /^(text|xml|json|yaml)$/i;\n\n\tdialect.templates.add('explain', {\n\t\tpattern: 'explain {options} {analyze} {verbose} {query} {select} {expression}',\n\t\tvalidate: function(type, params) {\n\t\t\ttemplateChecks.atLeastOneOfProps(type, params, ['query', 'select', 'expression']);\n\t\t\ttemplateChecks.onlyOneOfProps(type, params, ['query', 'select', 'expression']);\n\n\t\t\ttemplateChecks.propType(type, params, 'options', 'object');\n\n\t\t\tif (!_.isUndefined(params.options)) {\n\t\t\t\ttemplateChecks.atLeastOneOfProps(\n\t\t\t\t\t'explain:options',\n\t\t\t\t\tparams.options,\n\t\t\t\t\t['analyze', 'verbose', 'costs', 'buffers', 'timing', 'format']\n\t\t\t\t);\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'analyze', 'boolean');\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'verbose', 'boolean');\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'costs', 'boolean');\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'buffers', 'boolean');\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'timing', 'boolean');\n\t\t\t\ttemplateChecks.propType('explain:options', params.options, 'format', 'string');\n\t\t\t\ttemplateChecks.propMatch('explain:options', params.options, 'format', explainFormatRegExp);\n\t\t\t}\n\n\t\t\ttemplateChecks.propType(type, params, 'analyze', 'boolean');\n\t\t\ttemplateChecks.propType(type, params, 'verbose', 'boolean');\n\t\t}\n\t});\n\n\t// patch parent select template to add some blocks\n\tvar selectTemplate = dialect.templates.get('select');\n\tselectTemplate.pattern = selectTemplate.pattern.replace('{distinct}', '{distinct} {distinctOn}');\n\n\tvar parentSelectValidate = selectTemplate.validate;\n\tselectTemplate.validate = function(type, params) {\n\t\tparentSelectValidate(type, params);\n\n\t\ttemplateChecks.propType(type, params, 'distinctOn', ['string', 'array']);\n\t};\n\n\tdialect.templates.set('select', selectTemplate);\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/postgresql/blocks.js":"'use strict';\n\nvar _ = require('underscore');\n\nmodule.exports = function(dialect) {\n\tvar parentValueBlock = dialect.blocks.get('value');\n\tdialect.blocks.set('value', function(params) {\n\t\tvar value = params.value;\n\n\t\tvar result;\n\t\tif (_.isArray(value)) {\n\t\t\tresult = 'array[' + _(value).map(function(item) {\n\t\t\t\treturn dialect.builder._pushValue(item);\n\t\t\t}).join(', ') + ']';\n\t\t} else if (_.isObject(value)) {\n\t\t\tresult = dialect.builder._pushValue(JSON.stringify(value));\n\t\t} else {\n\t\t\tresult = parentValueBlock(params);\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tdialect.blocks.add('explain:options', function(params) {\n\t\treturn '(' +\n\t\t\t_(params.options)\n\t\t\t\t.chain()\n\t\t\t\t.pick(['analyze', 'verbose', 'costs', 'buffers', 'timing', 'format'])\n\t\t\t\t.map(function(value, key) {\n\t\t\t\t\treturn key + ' ' + value;\n\t\t\t\t})\n\t\t\t\t.value()\n\t\t\t\t.join(', ') +\n\t\t\t')';\n\t});\n\n\tdialect.blocks.add('explain:analyze', function() {\n\t\treturn 'analyze';\n\t});\n\n\tdialect.blocks.add('explain:verbose', function() {\n\t\treturn 'verbose';\n\t});\n\n\tdialect.blocks.add('distinctOn', function(params) {\n\t\tvar distinctOn = params.distinctOn;\n\t\tvar result = '';\n\n\t\tif (_.isString(distinctOn)) distinctOn = [distinctOn];\n\n\t\tif (_.isArray(distinctOn)) {\n\t\t\tresult = _(distinctOn).map(function(distinctOnField) {\n\t\t\t\treturn dialect._wrapIdentifier(distinctOnField);\n\t\t\t}).join(', ');\n\t\t}\n\n\t\tif (result) {\n\t\t\tresult = 'distinct on (' + result + ')';\n\t\t}\n\n\t\treturn result;\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/postgresql/operators/index.js":"'use strict';\n\nvar comparisonOperatorsInit = require('./comparison');\nvar fetchingOperatorsInit = require('./fetching');\n\nmodule.exports = function(dialect) {\n\tcomparisonOperatorsInit(dialect);\n\tfetchingOperatorsInit(dialect);\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/postgresql/operators/comparison.js":"'use strict';\n\nmodule.exports = function(dialect) {\n\tvar buildComparisonCondition = function(field, operator, value) {\n\t\treturn [field, operator, value].join(' ');\n\t};\n\n\tdialect.operators.comparison.add('$jsonContains', {\n\t\tdefaultFetchingOperator: '$json',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonCondition(field, '@>', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$jsonIn', {\n\t\tdefaultFetchingOperator: '$json',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonCondition(field, '<@', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$jsonHas', {\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonCondition(field, '?', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$jsonHasAny', {\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonCondition(field, '?|', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$jsonHasAll', {\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonCondition(field, '?&', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$ilike', {\n\t\tinversedOperator: '$nilike',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonCondition(field, 'ilike', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nilike', {\n\t\tinversedOperator: '$ilike',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonCondition(field, 'not ilike', value);\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/postgresql/operators/fetching.js":"'use strict';\n\nmodule.exports = function(dialect) {\n\tdialect.operators.fetching.add('$json', {\n\t\tfn: function(value, end) {\n\t\t\tif (end) value = {value: value};\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'value'});\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/sqlite/index.js":"'use strict';\n\nvar BaseDialect = require('../base');\nvar _ = require('underscore');\nvar util = require('util');\nvar blocksInit = require('./blocks');\n\nvar Dialect = module.exports = function(builder) {\n\tBaseDialect.call(this, builder);\n\n\t// init blocks\n\tblocksInit(this);\n};\n\nutil.inherits(Dialect, BaseDialect);\n\nDialect.prototype.config = _({}).extend(BaseDialect.prototype.config);\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/sqlite/blocks.js":"'use strict';\n\nvar\t_ = require('underscore');\n\nmodule.exports = function(dialect) {\n\tdialect.blocks.add('offset', function(params) {\n\t\tvar limit = '';\n\n\t\tif (_.isUndefined(params.limit)) {\n\t\t\tlimit = dialect.buildBlock('limit', {limit: -1}) + ' ';\n\t\t}\n\n\t\treturn limit + 'offset ' + dialect.builder._pushValue(params.offset);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-json-sql/node_modules/json-sql/lib/dialects/mysql/index.js":"'use strict';\n\nvar BaseDialect = require('../base');\nvar _ = require('underscore');\nvar util = require('util');\n\nvar Dialect = module.exports = function(builder) {\n\tBaseDialect.call(this, builder);\n};\n\nutil.inherits(Dialect, BaseDialect);\n\nDialect.prototype.config = _({}).extend(BaseDialect.prototype.config, {\n\tidentifierPrefix: '`',\n\tidentifierSuffix: '`'\n});\n"}